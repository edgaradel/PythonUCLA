len('mom') in [1, 2, 3]

[1, 2, 3] in len ('mom')

int('3') in [len('a'), len('ab'),len('abc')]

'a' in ['mom','dad']

len([1, 2, 3]) == len(['a','b','c'])

'3' in [1,2,3]


def mystery(s):
    i = 0
    result = ''

    while not s[i].isdigit():
          result = result + s[i]
          i = i + 1

    return result

def compress_list(L):
    """ (list of str) -> list of str

    	Return a new list with adjacent pairs of string elements       
	from Lconcatenated together, starting with indices 0 and 1,    
	2 and 3,and so on.

    Precondition: len(L) >= 2 and len(L) % 2 == 0

    >>> compress_list(['a', 'b', 'c', 'd'])
    ['ab', 'cd']
    """ 
    compressed_list = []
    i = 0

def while_version(L):
    """ (list of number) -> number
    """
    i = 0
    total = 0

    while i < len(L) and L[i] % 2 != 0:
         total = total + L[i]
          i = i + 1

     return total


>>> letters = ['b', 'd', 'a']
>>> # MISSING CODE HERE
>>> print(letters)
['a', 'b', 'd']

letters=sort(letters)


b[-2]='A'

>>> a = [1, 2, 3]
>>> b = a
>>> # MISSING CODE HERE
>>> print(a, b)
[1, 'A', 3] [1, 'A', 3]
    while i < len(L):
        compressed_list.append(L[i] + L[i + 1])
        i=i+2

     return compressed_list



a=[1,'A',3]

b=[1,'A',3]


b[1]='AB'
a[1]=a[1][0]

a[1]='A'



>>> a = [1, 2, 3]
>>> b = [1, 2, 3]
>>> # MISSING CODE HERE
>>> print(a, b)
[1, 'A', 3] [1, 'A', 3]


b=[1,'A',3]

b[1]='AB'
a[1]=a[1][0]


a[1]='A'


for num in range(3,8,20):
    print(num)